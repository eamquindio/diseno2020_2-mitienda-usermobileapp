// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:mitienda_userapp/models/category.dart';
import 'package:mitienda_userapp/models/jsonUtils/category_helper.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:mitienda_userapp/models/jsonUtils/orderProduct_helper.dart';
import 'package:mitienda_userapp/models/jsonUtils/order_entity_helper.dart';
import 'package:mitienda_userapp/models/jsonUtils/productStore_helper.dart';
import 'package:mitienda_userapp/models/jsonUtils/product_helper.dart';
import 'package:mitienda_userapp/models/jsonUtils/shoppingCartProduct_helper.dart';
import 'package:mitienda_userapp/models/jsonUtils/shoppingCart_helper.dart';
import 'package:mitienda_userapp/models/jsonUtils/store_helper.dart';
import 'package:mitienda_userapp/models/jsonUtils/user_helper.dart';
import 'package:mitienda_userapp/models/order.dart';
import 'package:mitienda_userapp/models/orderProduct.dart';
import 'package:mitienda_userapp/models/product.dart';
import 'package:mitienda_userapp/models/productStore.dart';
import 'package:mitienda_userapp/models/shoppingCart.dart';
import 'package:mitienda_userapp/models/shoppingCartProduct.dart';
import 'package:mitienda_userapp/models/store.dart';
import 'package:mitienda_userapp/models/user.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case ShoppingCartEntity:
        return shoppingCartEntityFromJson(data as ShoppingCartEntity, json)
            as T;
      case Store:
        return storeFromJson(data as Store, json) as T;
      case ShoppingCartProduct:
        return shoppingCartProductFromJson(data as ShoppingCartProduct, json)
            as T;
      case Product:
        return productFromJson(data as Product, json) as T;
      case User:
        return userFromJson(data as User, json) as T;
      case ProductStore:
        return productStoreFromJson(data as ProductStore, json) as T;
      case Category:
        return categoryFromJson(data as Category, json) as T;
      case OrderEntity:
        return orderEntityFromJson(data as OrderEntity, json) as T;
      case OrderProduct:
        return orderProductFromJson(data as OrderProduct, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case ShoppingCartEntity:
        return shoppingCartEntityToJson(data as ShoppingCartEntity);
      case Store:
        return storeToJson(data as Store);
      case ShoppingCartProduct:
        return shoppingCartProductToJson(data as ShoppingCartProduct);
      case Product:
        return productToJson(data as Product);
      case User:
        return userToJson(data as User);
      case ProductStore:
        return productStoreToJson(data as ProductStore);
      case Category:
        return categoryToJson(data as Category);
      case OrderEntity:
        return orderEntityToJson(data as OrderEntity);
      case OrderProduct:
        return orderProductToJson(data as OrderProduct);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'ShoppingCartEntity':
        return ShoppingCartEntity().fromJson(json);
      case 'Store':
        return Store().fromJson(json);
      case 'ShoppingCartProduct':
        return ShoppingCartProduct().fromJson(json);
      case 'Product':
        return Product().fromJson(json);
      case 'User':
        return User().fromJson(json);
      case 'ProductStore':
        return ProductStore().fromJson(json);
      case 'Category':
        return Category().fromJson(json);
      case 'OrderEntity':
        return OrderEntity().fromJson(json);
      case 'OrderProduct':
        return OrderProduct().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'ShoppingCartEntity':
        return List<ShoppingCartEntity>();
      case 'Store':
        return List<Store>();
      case 'ShoppingCartProduct':
        return List<ShoppingCartProduct>();
      case 'Product':
        return List<Product>();
      case 'User':
        return List<User>();
      case 'ProductStore':
        return List<ProductStore>();
      case 'Category':
        return List<Category>();
      case 'OrderEntity':
        return List<OrderEntity>();
      case 'OrderProduct':
        return List<OrderProduct>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
